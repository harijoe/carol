exports[`test renders PrimaryNavigation with AccountMenu 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <styled.nav>
    <li>
        <Mock />
    </li>
    <li>
        <Styled(Mock)
            activeClassName="active"
            onlyActiveOnIndex={true}
            to="/">
            <FormattedMessage
                id="home"
                tagName="span"
                values={Object {}} />
        </Styled(Mock)>
    </li>
    <li>
        <Mock
            label="user.my_account">
            <AccountMenu />
        </Mock>
    </li>
    <li>
        <Mock />
    </li>
</styled.nav>,
  "nodes": Array [
    <styled.nav>
      <li>
            <Mock />
      </li>
      <li>
            <Styled(Mock)
                  activeClassName="active"
                  onlyActiveOnIndex={true}
                  to="/">
                  <FormattedMessage
                        id="home"
                        tagName="span"
                        values={Object {}} />
            </Styled(Mock)>
      </li>
      <li>
            <Mock
                  label="user.my_account">
                  <AccountMenu />
            </Mock>
      </li>
      <li>
            <Mock />
      </li>
</styled.nav>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <PrimaryNavigation
        isAuthenticated={true} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "isAuthenticated": true,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <styled.nav>
          <li>
                    <Mock />
          </li>
          <li>
                    <Styled(Mock)
                              activeClassName="active"
                              onlyActiveOnIndex={true}
                              to="/">
                              <FormattedMessage
                                        id="home"
                                        tagName="span"
                                        values={Object {}} />
                    </Styled(Mock)>
          </li>
          <li>
                    <Mock
                              label="user.my_account">
                              <AccountMenu />
                    </Mock>
          </li>
          <li>
                    <Mock />
          </li>
</styled.nav>,
        "_debugID": 2,
        "_renderedOutput": <styled.nav>
          <li>
                    <Mock />
          </li>
          <li>
                    <Styled(Mock)
                              activeClassName="active"
                              onlyActiveOnIndex={true}
                              to="/">
                              <FormattedMessage
                                        id="home"
                                        tagName="span"
                                        values={Object {}} />
                    </Styled(Mock)>
          </li>
          <li>
                    <Mock
                              label="user.my_account">
                              <AccountMenu />
                    </Mock>
          </li>
          <li>
                    <Mock />
          </li>
</styled.nav>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <PrimaryNavigation
    isAuthenticated={true} />,
}
`;

exports[`test renders PrimaryNavigation with SignInDropDownMenu 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <styled.nav>
    <li>
        <Mock />
    </li>
    <li>
        <Styled(Mock)
            activeClassName="active"
            onlyActiveOnIndex={true}
            to="/">
            <FormattedMessage
                id="home"
                tagName="span"
                values={Object {}} />
        </Styled(Mock)>
    </li>
    <li>
        <SignInDropDownMenu />
    </li>
    <li>
        <Mock />
    </li>
</styled.nav>,
  "nodes": Array [
    <styled.nav>
      <li>
            <Mock />
      </li>
      <li>
            <Styled(Mock)
                  activeClassName="active"
                  onlyActiveOnIndex={true}
                  to="/">
                  <FormattedMessage
                        id="home"
                        tagName="span"
                        values={Object {}} />
            </Styled(Mock)>
      </li>
      <li>
            <SignInDropDownMenu />
      </li>
      <li>
            <Mock />
      </li>
</styled.nav>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <PrimaryNavigation
        isAuthenticated={false} />,
      "_debugID": 3,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "isAuthenticated": false,
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 2,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <styled.nav>
          <li>
                    <Mock />
          </li>
          <li>
                    <Styled(Mock)
                              activeClassName="active"
                              onlyActiveOnIndex={true}
                              to="/">
                              <FormattedMessage
                                        id="home"
                                        tagName="span"
                                        values={Object {}} />
                    </Styled(Mock)>
          </li>
          <li>
                    <SignInDropDownMenu />
          </li>
          <li>
                    <Mock />
          </li>
</styled.nav>,
        "_debugID": 4,
        "_renderedOutput": <styled.nav>
          <li>
                    <Mock />
          </li>
          <li>
                    <Styled(Mock)
                              activeClassName="active"
                              onlyActiveOnIndex={true}
                              to="/">
                              <FormattedMessage
                                        id="home"
                                        tagName="span"
                                        values={Object {}} />
                    </Styled(Mock)>
          </li>
          <li>
                    <SignInDropDownMenu />
          </li>
          <li>
                    <Mock />
          </li>
</styled.nav>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <PrimaryNavigation
    isAuthenticated={false} />,
}
`;
