exports[`test renders the ThumbnailCard component 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Styled(Mock)
    to="Test link">
    <Styled(Mock)>
        <Mock
            image="Test image"
            title="Test" />
        <styled.div>
            <Styled(Mock)
                icon="Test icon" />
            <Styled(Mock)>
                <li>
                    item1
                </li>
                <li>
                    item2
                </li>
            </Styled(Mock)>
            <styled.p>
                Allons-y ➔
            </styled.p>
        </styled.div>
    </Styled(Mock)>
</Styled(Mock)>,
  "nodes": Array [
    <Styled(Mock)
      to="Test link">
      <Styled(Mock)>
            <Mock
                  image="Test image"
                  title="Test" />
            <styled.div>
                  <Styled(Mock)
                        icon="Test icon" />
                  <Styled(Mock)>
                        <li>
                              item1
                        </li>
                        <li>
                              item2
                        </li>
                  </Styled(Mock)>
                  <styled.p>
                        Allons-y ➔
                  </styled.p>
            </styled.div>
      </Styled(Mock)>
</Styled(Mock)>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <ThumbnailCard
        icon="Test icon"
        image="Test image"
        items={
                Array [
                        "item1",
                        "item2",
                      ]
        }
        link="Test link"
        title="Test" />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "icon": "Test icon",
          "image": "Test image",
          "items": Array [
            "item1",
            "item2",
          ],
          "link": "Test link",
          "title": "Test",
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Styled(Mock)
          to="Test link">
          <Styled(Mock)>
                    <Mock
                              image="Test image"
                              title="Test" />
                    <styled.div>
                              <Styled(Mock)
                                        icon="Test icon" />
                              <Styled(Mock)>
                                        <li>
                                                  item1
                                        </li>
                                        <li>
                                                  item2
                                        </li>
                              </Styled(Mock)>
                              <styled.p>
                                        Allons-y ➔
                              </styled.p>
                    </styled.div>
          </Styled(Mock)>
</Styled(Mock)>,
        "_debugID": 2,
        "_renderedOutput": <Styled(Mock)
          to="Test link">
          <Styled(Mock)>
                    <Mock
                              image="Test image"
                              title="Test" />
                    <styled.div>
                              <Styled(Mock)
                                        icon="Test icon" />
                              <Styled(Mock)>
                                        <li>
                                                  item1
                                        </li>
                                        <li>
                                                  item2
                                        </li>
                              </Styled(Mock)>
                              <styled.p>
                                        Allons-y ➔
                              </styled.p>
                    </styled.div>
          </Styled(Mock)>
</Styled(Mock)>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ThumbnailCard
    icon="Test icon"
    image="Test image"
    items={
        Array [
            "item1",
            "item2",
          ]
    }
    link="Test link"
    title="Test" />,
}
`;
