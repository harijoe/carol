exports[`test renders QuickReplies 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Styled(Mock)>
    <Styled(Mock)>
        <Styled(Mock)
            onClick={[Function]}>
            <Mock
                image="test_img.png"
                title="test title" />
        </Styled(Mock)>
    </Styled(Mock)>
</Styled(Mock)>,
  "nodes": Array [
    <Styled(Mock)>
      <Styled(Mock)>
            <Styled(Mock)
                  onClick={[Function]}>
                  <Mock
                        image="test_img.png"
                        title="test title" />
            </Styled(Mock)>
      </Styled(Mock)>
</Styled(Mock)>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 2,
      "_context": Object {},
      "_currentElement": <Attachment
        attachment={
                Object {
                        "payload": Object {
                          "elements": Array [
                            Object {
                              "buttons": Array [
                                Object {
                                  "payload": "153-513-545133",
                                },
                              ],
                              "image_url": "test_img.png",
                              "title": "test title",
                            },
                          ],
                        },
                      }
        }
        reply={[Function]} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": StatelessComponent {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "attachment": Object {
            "payload": Object {
              "elements": Array [
                Object {
                  "buttons": Array [
                    Object {
                      "payload": "153-513-545133",
                    },
                  ],
                  "image_url": "test_img.png",
                  "title": "test title",
                },
              ],
            },
          },
          "reply": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Styled(Mock)>
          <Styled(Mock)>
                    <Styled(Mock)
                              onClick={[Function]}>
                              <Mock
                                        image="test_img.png"
                                        title="test title" />
                    </Styled(Mock)>
          </Styled(Mock)>
</Styled(Mock)>,
        "_debugID": 2,
        "_renderedOutput": <Styled(Mock)>
          <Styled(Mock)>
                    <Styled(Mock)
                              onClick={[Function]}>
                              <Mock
                                        image="test_img.png"
                                        title="test title" />
                    </Styled(Mock)>
          </Styled(Mock)>
</Styled(Mock)>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Attachment
    attachment={
        Object {
            "payload": Object {
              "elements": Array [
                Object {
                  "buttons": Array [
                    Object {
                      "payload": "153-513-545133",
                    },
                  ],
                  "image_url": "test_img.png",
                  "title": "test title",
                },
              ],
            },
          }
    }
    reply={[Function]} />,
}
`;
